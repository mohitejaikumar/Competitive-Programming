vector<node> segt;
vll val;

node merge(node &a, node &b)
{
     // merge update
    return node(a.sum + b.sum);
}
void build(ll ind, ll l, ll r)
{
    if (l == r)
    {   
        // leaft update 
        segt[ind] = node(val[l]);
        return;
    }
    ll mid = l + (r - l) / 2;
    build(ind * 2, l, mid);
    build(ind * 2 + 1, mid + 1, r);
    segt[ind] = merge(segt[2 * ind], segt[2 * ind + 1]);
    return;
}
void update(ll ind, ll l, ll r, ll pos, ll value)
{
    if (pos < l || pos > r)
    {
        return;
    }
    if (l == r)
    {   
        // leaf update 
        val[pos] = value;
        segt[ind] = node(value);
        return;
    }
    ll mid = l + (r - l) / 2;
    update(ind*2, l, mid, pos, value);
    update(ind*2+1, mid + 1, r, pos, value);
    segt[ind] = merge(segt[2 * ind], segt[2 * ind + 1]);
    return;
}
node query(ll ind, ll l, ll r, ll lq, ll rq)
{

    if (lq > r || rq < l)
    {   
        // leaf update 
        return node(0ll);
    }
    if (l >= lq && r <= rq)
    {
        return segt[ind];
    }

    ll mid = l + (r - l) / 2;
    node left = query(ind * 2, l, mid, lq, rq);
    node right = query(ind * 2 + 1, mid + 1, r, lq, rq);
    return merge(left, right);
}
/*---------------------------------TEMPLATE  ENDS --------------------------------------------------------------------------------------*/
void solve()
{
    ll n;
    cin >> n;
    val.assign(n, 0);
    // node update
    segt.assign(4 * n + 10, node(0ll));
    rep(i, 0, n)
    {
        cin >> val[i];
    }
    build(1, 0, n - 1);

    ll q;
    cin >> q;
    while (q--)
    {
        ll x;
        cin >> x;
        if (x == 1)
        {
            ll pos, val;
            cin >> pos >> val;
            update(1, 0, n - 1, pos - 1, val);
        }
        else
        {
            ll lq, rq;
            cin >> lq >> rq;
            node x = query(1, 0, n - 1, lq - 1, rq - 1);
            cout << x.sum << endl;
        }
    }

    return;
}
