ll di[] = {-1, 0, 0, 1};
ll dj[] = {0, -1, 1, 0};

vll vis;
vll dis;
vll par;
vector<vll> adj;
vector<vpll> adj_w;
vll pathvis;
stack<ll> topoStack;
vll topo;
vll indegree;
vector<vector<ll>> adj_matrix;
vector<vll> adjT;
vector<ll> sccNodes;
vpll bridges;
vll tin;
vll lowIn;
vll articuNode;
ll timer = 1;
class DisjointSet
{
    // no. of component -----> parent[node]==node
    // detect no. of usless edges
public:
    vll rank, size, parent;
    DisjointSet(ll n)
    {
        rank.assign(n + 1, 0);
        size.assign(n + 1, 1);
        parent.assign(n + 1, 0);
        rep(i, 0, n + 1)
        {
            parent[i] = i;
        }
    }
    ll findUPar(ll node)
    {
        if (node == parent[node])
        {
            return node;
        }
        return parent[node] = findUPar(parent[node]);
    }
    void unionByRank(ll u, ll v)
    {

        // pathCompression
        ll par_ult_v = findUPar(v);
        ll par_ult_u = findUPar(u);

        if (par_ult_u == par_ult_v)
        {
            return;
        }
        // add smaller to larger
        if (rank[par_ult_u] < rank[par_ult_v])
        {
            parent[par_ult_u] = par_ult_v;
        }
        else if (rank[par_ult_v] < rank[par_ult_u])
        {

            parent[par_ult_v] = par_ult_u;
        }
        else
        {
            parent[par_ult_v] = par_ult_u;
            rank[par_ult_u]++;
        }
        return;
    }
    void unionBySize(ll u, ll v)
    {
        ll par_ult_v = findUPar(v);
        ll par_ult_u = findUPar(u);

        if (par_ult_u == par_ult_v)
        {
            return;
        }
        // add smaller to larger
        if(size[par_ult_u]>size[par_ult_v]){
             swap(par_ult_v,par_ult_u);
         }
       
            parent[par_ult_u] = par_ult_v;
            size[par_ult_v] += size[par_ult_u];
            size[par_ult_u]=0;

        return;
    }
};
class Graph
{
    // resize this
public:
    Graph(ll n)
    {
        par.assign(n + 1, 0);
        dis.assign(n + 1, 1e9);
        vis.assign(n + 1, 0);
        adj.assign(n + 1,{});
        adj_w.assign(n + 1,{});
        indegree.assign(n + 1,0);

        // SCC's
        adjT.assign(n + 1,{});

        // bridges and Articulation
        tin.assign(n + 1, 0);
        lowIn.assign(n + 1, 0);
        articuNode.assign(n + 1, 0);
        return;
    }
    void addEdge(ll x, ll y)
    {
        // go from x----->y
        adj[x].push_back(y);

        indegree[y]++;

        return;
    }
    void addEdgeWeight(ll x, ll y, ll c)
    {
        // go from x----->y with weight c
        adj_w[x].push_back({y, c});
        return;
    }

    // print path
    void print_path(ll node)
    {
        if (par[node] == -1)
            return;
        print_path(par[node]);
        cout << node << " ";
        return;
    }
    void dfs(ll node, ll parent)
    {
        vis[node] = 1;
        par[node] = parent;

        // Bridges && Articulation node
        tin[node] = lowIn[node] = timer;
        timer++;
        ll child = 0;

        for (auto it : adj[node])
        {
            ll neigh = it;

            // Normal dfs-->

            /*if (!vis[neigh])
            {
                // pre traversal
                dfs(neigh);

                // post traversal
            }*/

            // Bridges ----->

            /* if (it == par[node])
                continue;
            if (vis[it] == 0)
            {

                dfs(it, node);
                lowIn[node] = min(lowIn[node], lowIn[it]);
                // node ------- it (isBride ?)
                if (lowIn[it] > tin[node])
                {
                    bridges.push_back({node, it});
                }
            }
            else
            {
                lowIn[node] = min(lowIn[node], lowIn[it]);
            }*/

            // Articulation node

            if (it == par[node])
                continue;
            if (vis[it] == 0)
            {

                dfs(it, node);
                lowIn[node] = min(lowIn[node], lowIn[it]);
                // node ------- it (isArticulation ?)
                if (lowIn[it] >= tin[node] && par[node] != node)
                {
                    articuNode[node] = 1;
                }
                child++;
            }
            else
            {
                lowIn[node] = min(lowIn[node], tin[it]);
            }
        }

        if (child > 1 && par[node] == node)
        {
            articuNode[node] = 1;
        }

        // leaf logic
        topoStack.push(node);
        return;
    }
    void dfs2(ll node)
    {
        vis[node] = 1;
        sccNodes.push_back(node);
        for (auto it : adjT[node])
        {
            ll neigh = it;
            if (!vis[neigh])
            {
                // pre traversal
                dfs2(neigh);
                // post traversal
            }
        }
        // leaf logic

        return;
    }
    void BFS(ll sc)
    {
        queue<ll> q;
        vis[sc] = 1;
        dis[sc] = 0;
        q.push(sc);
        while (!q.empty())
        {
            ll x = q.front();
            q.pop();
            ll node = x;

            for (auto neigh : adj[node])
            {

                if (!vis[neigh])
                {
                    q.push(neigh);
                    vis[neigh] = 1;
                }

                // if(dis[node]+1<dis[neigh]){
                //     dis[neigh]=dis[node]+1;
                //     q.push(neigh);
                // }
            }
        }
        return;
    }
    // detect in Undirected Graph
    // pass node and its parent
    bool detectCycleBFS(pll p)
    {
        queue<pll> q;
        vis[p.f] = 1;
        par[p.f] = p.s;
        q.push(p);
        while (!q.empty())
        {
            pll x = q.front();
            q.pop();
            ll node = x.f;
            ll parent = x.s;
            par[node] = parent;
            for (ll neigh : adj[node])
            {
                if (!vis[neigh])
                {
                    q.push({neigh, node});
                    vis[neigh] = 1;
                }
                else if (parent != neigh)
                {
                    return true;
                }
            }
        }
        return false;
    }

    // detect in Undirected Graph
    bool detectCycleDFS(pll p)
    {
        vis[p.f] = 1;

        for (ll neigh : adj[p.f])
        {
            if (!vis[neigh])
            {
                if (detectCycleDFS({neigh, p.f}) == true)
                {
                    return true;
                }
            }
            else if (neigh != p.s)
            {
                return true;
            }
        }
        return false;
    }
    // detect in Directed Graph
    bool detectCycleDirectedDFS(ll node)
    {

        vis[node] = 1;
        pathvis[node] = 1;
        /*one which are part of cycle and there any of the path leads to cycle
         there pathvis is 1*/
        for (ll neigh : adj[node])
        {
            // not visited nodes
            if (!vis[neigh])
            {
                if (detectCycleDirectedDFS(neigh) == true)
                    return true;
            }
            // it is visited earlier and also part of current pathvisit
            else if (pathvis[neigh])
            {
                return true;
            }
        }
        /* nodes which come till this point are not part of cycle
        and also none of its path not leads to cycle.*/
        pathvis[node] = 0;
        return false;
    }
    bool detectCycleDirected(ll n)
    {

        pathvis.resize(n + 1);
        rep(i, 0, n)
        {
            if (!vis[i])
            {
                if (detectCycleDirectedDFS(i))
                {
                    return true;
                }
            }
        }
        return false;
    }
    // TOPOLOGICAL SORTING DFS
    // run dfs.
    // use for loop of vis before using.
    // pop_back from stack top is the first.
    // valid on DAG only.
    // To find shortest path in DAG use toposort

    stack<ll> topoSort(ll n)
    {

        rep(i, 0, n)
        {
            if (!vis[i])
            {
                dfs(i, i);
            }
        }
        return topoStack;
    }

    void shortestPathDAG(ll n, ll sc)
    {
        // work in O(N+M)
        /* using Topo because there is order of validation
           which is been followed which equal to topo order*/
        stack<ll> st;
        st = topoSort(n);
        dis[sc] = 0;

        while (!st.empty())
        {
            ll node = st.top();
            st.pop();
            for (auto neigh : adj_w[node])
            {
                ll wt = neigh.s;
                if (dis[node] + wt < dis[neigh.f])
                {
                    dis[neigh.f] = dis[node] + wt;
                }
            }
        }
    }

    // USE IT FOR COMPONENTS AND TOPOSORT
    //    rep(i,1,n+1){
    //     if(!vis[i])
    //     {
    //         dfs(i);
    //     }
    //    }

    // TOPOLOGICAL SORTING BFS || Khan's Algorithm
    // works for multiple component and single node as well.
    void khan(ll n)
    {

        queue<ll> q;
        rep(i, 0, n)
        {
            if (indegree[i] == 0)
            {
                q.push(i);
            }
        }
        while (!q.empty())
        {
            int x = q.front();
            q.pop();
            topo.push_back(x);
            for (auto neigh : adj[x])
            {
                indegree[neigh]--;
                if (indegree[neigh] == 0)
                {
                    q.push(neigh);
                }
            }
        }
        // all the nodes which are not in topo are part of a cycle.
        // want lexo_smaller use priority queue.
        // if topo.size()!=n then it is a cycle.
    }

    void dijkstra(ll sc)
    {
        // O(E*log(V))
        dis[sc] = 0;
        par[sc] = -1;
        set<pll> st;
        st.insert({0, sc});

        //{dis,node};
        while (!st.empty())
        {
            pll temp = *st.begin();
            st.erase(temp);
            ll dist = temp.f;
            ll node = temp.s;

            for (auto it : adj_w[node])
            {
                ll edgeWigh = it.s;
                ll neigh = it.f;
                if (dist + edgeWigh < dis[neigh])
                {
                    par[neigh] = node;
                    st.erase({dis[neigh], neigh});
                    dis[neigh] = dist + edgeWigh;
                    st.insert({dis[neigh], neigh});
                }
            }
        }
        return;
    }

    bool bellmanFord(ll totalNodes, ll sc)
    {
        // considered 0-based  Nodes
        // O(V*E)
        // return wheather negative cycle or not.
        // N-1 relaxation of edges
        dis[sc] = 0;
        rep(i, 0, totalNodes - 1)
        {

            rep(j, 0, totalNodes)
            {

                for (auto it : adj_w[j])
                {
                    ll wt = it.s;
                    ll neigh = it.f;

                    if (dis[j] != 1e9 && dis[j] + wt < dis[neigh])
                    {
                        dis[neigh] = dis[j] + wt;
                    }
                }
            }
        }
        // Nth relaxation
        bool flag = 0;
        rep(j, 0, totalNodes)
        {

            for (auto it : adj_w[j])
            {
                ll wt = it.s;
                ll neigh = it.f;

                if (dis[j] != 1e9 && dis[j] + wt < dis[neigh])
                {
                    dis[neigh] = dis[j] + wt;
                    flag = 1;
                    return true;
                }
            }
        }
        return false;
    }

    bool floydWarshall(ll n)
    {
        // O(N*N*N)
        // via every node
        // dijikstra will work if not negative cycle O(V*E log(V))
        // detect negative cycle
        // Undirected graph as well
        adj_matrix.resize(n + 1, vll(n + 1, 0));
        rep(i, 0, n)
        {
            rep(j, 0, n)
            {
                if (i == j)
                {
                    adj_matrix[i][j] = 0;
                }
                else
                {

                    adj_matrix[i][j] = 1e9;
                }
            }
        }
        rep(i, 0, n)
        {
            for (auto it : adj_w[i])
            {
                ll neigh = it.f;
                ll wt = it.s;
                adj_matrix[i][neigh] = wt;
            }
        }
        bool detected = false;

        rep(via, 0, n)
        {
            rep(i, 0, n)
            {
                rep(j, 0, n)
                {
                    adj_matrix[i][j] = min(adj_matrix[i][j], adj_matrix[i][via] + adj_matrix[via][j]);
                }
            }
        }
        rep(i, 0, n)
        {
            if (adj_matrix[i][i] < 0)
            {
                detected = true;
                break;
            }
        }
        return detected;
    }
    pair<ll, vpll> primsAlgorithmMST(ll n)
    {

        ll sum = 0;
        priority_queue<pair<ll, pll>, vector<pair<ll, pll>>, greater<pair<ll, pll>>> pq;
        // {wt,node,parent}
        pq.push({0, {0, -1}});
        vll Vis(n + 1, 0);
        vpll MST;
        // O(ElogE + ElogE)
        while (!pq.empty())
        {

            auto it = pq.top();
            pq.pop();
            ll node = it.s.f;
            ll wt = it.f;
            ll parent = it.s.s;
            if (Vis[node])
                continue;
            Vis[node] = 1;
            sum += wt;
            // Add it to MST
            if (parent != -1)
            {
                MST.push_back({node, parent});
            }
            // ElogE
            for (auto it : adj_w[node])
            {
                ll neigh = it.f;
                ll weight = it.s;
                if (!Vis[neigh])
                {
                    pq.push({weight, {neigh, node}});
                }
            }
        }
        return mk(sum, MST);
    }
    pair<ll, vpll> krushkalsAlgoMST(ll n)
    {
        ll sum = 0;
        vector<pair<ll, pll>> edges;
        rep(i, 0, n + 1)
        {
            for (auto it : adj_w[i])
            {
                ll node = it.f;
                ll wt = it.s;
                edges.push_back({wt, {node, i}});
            }
        }
        sort(all(edges));
        ll edglth = edges.size();
        DisjointSet d1(n + 1);
        vpll MST;
        rep(i, 0, edglth)
        {
            ll wt = edges[i].f;
            ll node = edges[i].s.f;
            ll parent = edges[i].s.s;
            if (d1.findUPar(node) != d1.findUPar(parent))
            {
                sum += wt;
                MST.push_back({node, parent});
                d1.unionBySize(node, parent);
            }
        }
        return mk(sum, MST);
    }
    pair<ll, vector<vll>> SCCs(ll n)
    {
        // O(V+E)
        //  sort by finish time
        rep(i, 0, n)
        {
            if (!vis[i])
            {
                dfs(i, i);
            }
        }
        stack<ll> st = topoStack;

        // reverse edges
        rep(i, 0, n)
        {
            vis[i] = 0;
            for (auto it : adj[i])
            {
                adjT[it].push_back(i);
            }
        }

        // dfs2
        ll scc = 0;
        vector<vll> sccS;
        while (!st.empty())
        {
            ll node = st.top();
            st.pop();
            if (!vis[node])
            {
                // cout<<node<<endl;
                sccNodes.clear();
                dfs2(node);
                sccS.push_back(sccNodes);

                scc++;
            }
        }

        return mk(scc, sccS);
    }
};

/*--------------------------------------Graph Algorithm Ends---------------------------------------------------------*/

/*---------------------------------TEMPLATE  ENDS --------------------------------------------------------------------------------------*/
void solve()
{
    ll n, m;
    cin >> n >> m;
    Graph g1(n);
    rep(i, 0, m)
    {
        ll x, y;
        cin >> x >> y;
        g1.addEdge(x, y);
        g1.addEdge(y, x);
    }
   
    return;
}
