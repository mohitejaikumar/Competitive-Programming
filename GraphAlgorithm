#include <bits/stdc++.h>
using namespace std;
/* 142857 cyclic number 0588235294117647 cyclic number */
#define ll long long
#define mk make_pair
#define vvll(n, m, v) vector<vector<ll>> v(n, vll(m, 0))
#define all(v) v.begin(), v.end()
#define vvc vector<vector<char>>
#define vss vector<string>
#define emp emplace
#define pb push_back
#define pf push_front
#define dq deque
#define llmn LONG_LONG_MIN
#define llmx LONG_LONG_MAX
#define umll unordered_map<ll>
#define mll map<ll, ll>
#define sll set<ll>
#define usll unordered_set<ll>
#define vll vector<ll>
#define vpll vector<pair<ll, ll>>
#define pll pair<ll, ll>
#define mk make_pair
#define ss string
#define pqmin priority_queue<ll, vll, greater<ll>()>
#define pqmax priority_queue<ll>
#define llmin LONG_LONG_MIN
#define llmax LONG_LONG_MAX
#define s second
#define f first
#define repg(i, a, b, c) for (ll i = a; i < b; i += c)
#define rep(i, a, b) for (ll i = a; i < b; i++)
#define rrep(i, a, b) for (ll i = a; i > b; i--)
#define rrepg(i, a, b, c) for (ll i = a; i > b; i -= c)
#define trv(it, mp) for (auto it : mp)
#define rot_l(v, p) rotate(v.begin(), v.begin() + p, v.end())
#define rot_r(v, p) rotate(v.begin(), v.begin() + v.size() - p, v.end())
#define cont(v, p) count(v.begin(), v.end(), p)
#define accumulate(v, k) accumulate(v[i].begin(), v[i].begin() + k, 0)
#define fastio                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);
const ll M = 1e9 + 7;
const ll M2 = 998244353;
#define yes cout << "YES" << endl;
#define no cout << "NO" << endl;

ll mod(ll x)
{
    return ((x % M + M) % M);
}
ll add(ll a, ll b)
{
    return mod(mod(a) + mod(b));
}
ll mul(ll a, ll b)
{
    return mod(mod(a) * mod(b));
}
ll Floor(ll x, ll a)
{
    if (x < 0)
    {
        return floor(x / a) - 1;
    }
    return floor(x / a);
}
ll fac[2000];
signed binExp(ll a, ll b, ll m)
{
    ll ans = 1;
    while (b > 0)
    {
        if (b & 1)
        {
            ans = (ans * a) % m;
            b = b - 1;
        }
        a = (a * a) % m;
        b = b >> 1;
    }
    return ans % m;
}
void fact(ll n)
{
    fac[0] = 1;
    rep(i, 1, n + 1) fac[i] = (i * fac[i - 1]) % M;
    return;
}
ll ncr(ll n, ll r)
{
    if (r > n)
        return 0;
    return ((fac[n] * binExp(fac[n - r], M - 2, M)) % M * binExp(fac[r], M - 2, M)) % M;
}
ll gcd(ll a, ll b, ll &x, ll &y)
{
    if (b == 0)
    {
        x = 1;
        y = 0;
        return a;
    }
    ll x1, y1;
    ll d = gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1 * (a / b);
    return d;
}
int setBitNumber(int n)
{
    if (n == 0)
        return 0;

    int msb = 0;
    n = n / 2;
    while (n != 0)
    {
        n = n / 2;
        msb++;
    }

    return (1 << msb);
}
bool check(ll mid)
{
}
ll bin_Search(ll l, ll r, ll ans)
{
    while (l <= r)
    {
        ll mid = (l + r) >> 1;
        if (check(mid))
        {
            l = mid;
            ans = mid;
        }
        else
        {
            r = mid;
        }
    }
    return ans;
}
ll lcm(ll a, ll b)
{
    return (a * b) / (__gcd(a, b));
}
bool is_Palindrom(string s)
{
    string z = s;
    reverse(s.begin(), s.end());
    return s == z;
}
ll lis(vll &v)
{
    ll size = v.size();
    vll temp;
    temp.push_back(v[0]);
    ll len = 1;
    rep(i, 1, size)
    {
        if (temp.back() < v[i])
        {
            temp.push_back(v[i]);
            len++;
        }
        else
        {
            ll ind = lower_bound(all(temp), v[i]) - temp.begin();
            temp[ind] = v[i];
        }
    }
    return len;
}
/*------------------------GRAPH----ALGORITHMS-----------------------------------------------------*/

// resize this
vll vis;
vll dis;
vll par;
vector<vll> adj;
vector<vpll> adj_w;
vll pathvis;
stack<ll> topoStack;
vll topo;
vll indegree;

ll di[] = {-1, 0, 0, 1};
ll dj[] = {0, -1, 1, 0};

void makeGraph(ll n)
{
    par.resize(n + 1, 0);
    dis.resize(n + 1, 1e9);
    vis.resize(n + 1, 0);
    adj.resize(n + 1);
    adj_w.resize(n + 1);
    indegree.resize(n + 1);
}
void addEdge(ll x, ll y)
{
    // go from x----->y
    adj[x].push_back(y);

    indegree[y]++;

    return;
}
void addEdgeWeigh(ll x, ll y, ll c)
{
    // go from x----->y with weight c
    adj_w[x].push_back({y, c});
}

// print path
void print_path(ll node)
{
    if (par[node] == -1)
        return;
    print_path(par[node]);
    cout << node << " ";
    return;
}
void dfs(ll node)
{
    vis[node] = 1;
    for (auto it : adj[node])
    {
        ll neigh = it;
        if (!vis[neigh])
        {
            // pre traversal
            dfs(neigh);
            // post traversal
        }
    }
    // leaf logic
    topoStack.push(node);
    return;
}
void BFS(ll sc)
{
    queue<ll> q;
    vis[sc] = 1;
    dis[sc] = 0;
    q.push(sc);
    while (!q.empty())
    {
        ll x = q.front();
        q.pop();
        ll node = x;

        for (auto neigh : adj[node])
        {

            if (!vis[neigh])
            {
                q.push(neigh);
                vis[neigh] = 1;
            }

            // if(dis[node]+1<dis[neigh]){
            //     dis[neigh]=dis[node]+1;
            //     q.push(neigh);
            // }
        }
    }
    return;
}
// detect in Undirected Graph
// pass node and its parent
bool detectCycleBFS(pll p)
{
    queue<pll> q;
    vis[p.f] = 1;
    par[p.f] = p.s;
    q.push(p);
    while (!q.empty())
    {
        pll x = q.front();
        q.pop();
        ll node = x.f;
        ll parent = x.s;
        par[node] = parent;
        for (ll neigh : adj[node])
        {
            if (!vis[neigh])
            {
                q.push({neigh, node});
                vis[neigh] = 1;
            }
            else if (parent != neigh)
            {
                return true;
            }
        }
    }
    return false;
}

// detect in Undirected Graph
bool detectCycleDFS(pll p)
{
    vis[p.f] = 1;

    for (ll neigh : adj[p.f])
    {
        if (!vis[neigh])
        {
            if (detectCycleDFS({neigh, p.f}) == true)
            {
                return true;
            }
        }
        else if (neigh != p.s)
        {
            return true;
        }
    }
    return false;
}
// detect in Directed Graph
bool detectCycleDirectedDFS(ll node)
{

    vis[node] = 1;
    pathvis[node] = 1;
    /*one which are part of cycle and there any of the path leads to cycle
     there pathvis is 1*/
    for (ll neigh : adj[node])
    {
        // not visited nodes
        if (!vis[neigh])
        {
            if (detectCycleDirectedDFS(neigh) == true)
                return true;
        }
        // it is visited earlier and also part of current pathvisit
        else if (pathvis[neigh])
        {
            return true;
        }
    }
    /* nodes which come till this point are not part of cycle
    and also none of its path not leads to cycle.*/
    pathvis[node] = 0;
    return false;
}
bool detectCycleDirected(ll n)
{

    pathvis.resize(n + 1);
    rep(i, 1, n + 1)
    {
        if (!vis[i])
        {
            if (detectCycleDirectedDFS(i))
            {
                return true;
            }
        }
    }
    return false;
}
// TOPOLOGICAL SORTING DFS
// run dfs.
// use for loop of vis before using.
// pop_back from stack top is the first.
// valid on DAG only.
// To find shortest path in DAG use toposort

stack<ll> topoSort(ll n)
{

    rep(i, 1, n + 1)
    {
        if (!vis[i])
        {
            dfs(i);
        }
    }
    return topoStack;
}

void shortestPathDAG(ll n, ll sc)
{
    // work in O(N+M)
    /* using Topo because there is order of validation
       which is been followed which equal to topo order*/
    stack<ll> st;
    st = topoSort(n);
    dis[sc] = 0;

    while (!st.empty())
    {
        ll node = st.top();
        st.pop();
        for (auto neigh : adj_w[node])
        {
            ll wt = neigh.s;
            if (dis[node] + wt < dis[neigh.f])
            {
                dis[neigh.f] = dis[node] + wt;
            }
        }
    }
}

// USE IT FOR COMPONENTS AND TOPOSORT
//    rep(i,1,n+1){
//     if(!vis[i])
//     {
//         dfs(i);
//     }
//    }

// TOPOLOGICAL SORTING BFS || Khan's Algorithm
// works for multiple component and single node as well.
void khan(ll n)
{

    queue<ll> q;
    rep(i, 1, n + 1)
    {
        if (indegree[i] == 0)
        {
            q.push(i);
        }
    }
    while (!q.empty())
    {
        int x = q.front();
        q.pop();
        topo.push_back(x);
        for (auto neigh : adj[x])
        {
            indegree[neigh]--;
            if (indegree[neigh] == 0)
            {
                q.push(neigh);
            }
        }
    }
    // all the nodes which are not in topo are part of a cycle.
    // want lexo_smaller use priority queue.
    // if topo.size()!=n then it is a cycle.
}

void dijkstra(ll sc)
{
    // O(E*log(V))
    dis[sc] = 0;
    par[sc] = -1;
    set<pll> st;
    st.insert({0, sc});

    //{dis,node};
    while (!st.empty())
    {
        pll temp = *st.begin();
        st.erase(temp);
        ll dist = temp.f;
        ll node = temp.s;

        for (auto it : adj_w[node])
        {
            ll edgeWigh = it.s;
            ll neigh = it.f;
            if (dist + edgeWigh < dis[neigh])
            {
                par[neigh] = node;
                st.erase({dis[neigh], neigh});
                dis[neigh] = dist + edgeWigh;
                st.insert({dis[neigh], neigh});
            }
        }
    }
    return;
}

bool bellmanFord(ll totalNodes, ll sc)
{
    // considered 0-based  Nodes
    // O(V*E)
    // return wheather negative cycle or not.
    dis[sc] = 0;
    rep(i, 0, totalNodes - 1)
    {

        rep(j, 0, totalNodes)
        {

            for (auto it : adj_w[j])
            {
                ll wt = it.s;
                ll neigh = it.f;

                if (dis[j] != 1e9 && dis[j] + wt < dis[neigh])
                {
                    dis[neigh] = dis[j] + wt;
                }
            }
        }
    }
    // Nth relaxation
    bool flag = 0;
    rep(j, 0, totalNodes)
    {

        for (auto it : adj_w[j])
        {
            ll wt = it.s;
            ll neigh = it.f;

            if (dis[j] != 1e9 && dis[j] + wt < dis[neigh])
            {
                dis[neigh] = dis[j] + wt;
                flag = 1;
                return true;
            }
        }
    }
    return false;
}

/*--------------------------------------Graph Algorithm Ends---------------------------------------------------------*/

/*---------------------------------TEMPLATE  ENDS --------------------------------------------------------------------------------------*/
void solve()
{
    ll n, m;
    cin >> n >> m;

    makeGraph(n + 1);

    rep(i, 0, m)
    {
        ll x, y, c;
        cin >> x >> y >> c;

        addEdgeWeigh(x, y, c);
        addEdgeWeigh(y, x, c);
    }
    // cout << bellmanFord(n) << endl;

    return;
}
/*-----------------------------------------------------------------------------------------------------------------------*/
signed main()
{
    fastio;
    ll t = 1;
    // cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}
/* if we want to flip bits we will use (~) operator and do (&) with (1<<maxbit)-1
   to remove complication of -ve numbers .
~(-1) == 0*/
