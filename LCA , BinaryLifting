
// 1-based
// parent[x][i] ---> 2^(i)th parent of x;

vector<vector<ll>> parent(100006, vll(18, 0));
vector<vector<ll>> adj;
vll level(100006, 0);
void dfs(ll node, ll par, ll lev = 1)
{

    parent[node][0] = par;
    level[node] = lev;

    rep(i, 1, 18) parent[node][i] = parent[parent[node][i - 1]][i - 1];

    for (auto it : adj[node])
    {
        if (it == par)
            continue;
        dfs(it, node, lev + 1);
    }
    return;
}

ll binLifting(ll node, ll k)
{
    ll ctr = 0;
    while (k)
    {

        if (k & 1)
            node = parent[node][ctr];

        ctr++;
        k >>= 1;
    }

    return node;
}

// considered u as depest node
ll lca(ll u, ll v)
{
    if (level[v] > level[u])
        swap(u, v);

    // bring u and v at same level
    ll k = level[u] - level[v];
    u = binLifting(u, k);

    if (u == v)
        return u;

    rrep(i, 17, -1)
    {
        if (parent[u][i] != parent[v][i])
        {
            u = parent[u][i];
            v = parent[v][i];
        }
    }
    // u and v are always just beneath lca
    return parent[u][0];
}
